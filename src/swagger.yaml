openapi: 3.0.0
info:
  title: User API
  description: API for user management
  version: '1.0.0'
servers:
  - url: http://localhost:3005
  - url: https://api.catoff.xyz
paths:
  /user/login:
    post:
      summary: User login
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  type: string
                message:
                  type: string
                publicKey:
                  type: string
              required:
                - signature
                - message
                - publicKey
      responses:
        '200':
          description: Login successful
        '500':
          description: Login failed

  /user/addUserDetails:
    post:
      summary: Add user details
      tags:
        - User
      security:
        - bearerAuth: [] # Indicates that this endpoint is secured with bearer token authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                UserName:
                  type: string
              required:
                - Email
                - UserName
      responses:
        '200':
          description: User details added successfully
        '401':
          description: Unauthorized due to missing or invalid token
        '500':
          description: Internal server error

  /googleAuth:
    get:
      summary: Redirect to Google OAuth
      tags:
        - GoogleAuth
      responses:
        '302':
          description: Redirect to Google for authentication
        '500':
          description: Internal server error

  /googleAuth/callback:
    get:
      summary: Handle Google OAuth callback
      tags:
        - GoogleAuth
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: Authorization code returned by Google
      responses:
        '302':
          description: Redirect to a specified URL upon successful authentication
        '500':
          description: Internal server error

  /googleAuth/signout:
    post:
      summary: Sign out user
      tags:
        - GoogleAuth
      security:
        - bearerAuth: [] # Assuming that sign out requires a valid JWT
      responses:
        '200':
          description: Logged out successfully
        '401':
          description: Unauthorized due to missing or invalid token
        '500':
          description: Internal server error

  /userBoard/dashboard/userCurrentTable:
    get:
      summary: Retrieves the current user's standings in challenges
      tags:
        - UserBoard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  challengeId:
                    type: integer
                  challengeType:
                    type: string
                  currentValue:
                    type: number
                  rank:
                    type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /userBoard/dashboard/userProgressGraph/{period}:
    get:
      summary: Retrieves the user's progress graph for a given period
      tags:
        - UserBoard
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: path
          required: true
          schema:
            type: string
            enum: [30days, 24hours, all]
          description: The period for which to retrieve progress data
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                    creditsEarned:
                      type: number
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /userBoard/dashboard/userDetails:
    get:
      summary: Retrieves the user's detailed information including participation and rewards
      tags:
        - UserBoard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserID:
                    type: integer
                  TotalRewardsWon:
                    type: number
                  PastChallenges:
                    type: integer
                  CurrentActiveChallenges:
                    type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error


  /player/{ID}:
    get:
      summary: Retrieve a player by ID
      tags:
        - Player
      parameters:
        - in: path
          name: ID
          required: true
          schema:
            type: integer
          description: Player ID
      responses:
        '200':
          description: Player retrieved successfully
        '404':
          description: Player not found
        '500':
          description: Internal server error
    put:
      summary: Update a player by ID
      tags:
        - Player
      parameters:
        - in: path
          name: ID
          required: true
          schema:
            type: integer
          description: Player ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Value:
                  type: integer
              required:
                - Value
      responses:
        '200':
          description: Player updated successfully
        '400':
          description: Validation error
        '404':
          description: Player not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a player by ID
      tags:
        - Player
      parameters:
        - in: path
          name: ID
          required: true
          schema:
            type: integer
          description: Player ID
      responses:
        '200':
          description: Player deleted successfully
        '404':
          description: Player not found
        '500':
          description: Internal server error

  /player/challenge/{ID}:
    get:
      summary: Retrieve all players of a challenge
      tags:
        - Player
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ID
          required: true
          schema:
            type: integer
          description: Challenge ID
      responses:
        '200':
          description: Players retrieved successfully
        '404':
          description: Challenge not found
        '500':
          description: Internal server error

  /oktoProxy/authenticate:
    post:
      summary: Authenticate user with Okto
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authentication successful
        '500':
          description: Authentication failed

  /oktoProxy/set_pin:
    post:
      summary: Set new PIN for Okto user
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authentication successful
        '500':
          description: Authentication failed

  /oktoProxy/create_wallet:
    post:
      summary: Create wallet for Okto user
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wallet created successfully
        '500':
          description: Failed to create wallet

  /oktoProxy/refresh_token:
    post:
      summary: Refresh tokens for Okto user
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Tokens refreshed successfully
        '500':
          description: Failed to refresh tokens

  /oktoProxy/user_from_token:
    get:
      summary: Retrieve user information from Okto
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
        '500':
          description: Failed to retrieve user information

  /oktoProxy/wallets:
    get:
      summary: Fetch all wallets created by the user
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched all wallets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsResponse'
        '500':
          description: Failed to fetch wallets
  /oktoProxy/portfolio:
    get:
      summary: Get portfolio data of the user
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched portfolio data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioResponse'
        '500':
          description: Failed to fetch portfolio data
  /oktoProxy/rawtransaction/execute:
    post:
      summary: Execute a raw transaction on a network
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawTransactionRequest'
      responses:
        '200':
          description: Successfully executed raw transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawTransactionResponse'
        '500':
          description: Failed to execute raw transaction
  /oktoProxy/rawtransaction/status:
    get:
      summary: Get the details of the raw transaction status
      tags:
        - OktoProxy
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: order_id
          required: true
          schema:
            type: string
          description: Order ID of the transaction to check
      responses:
        '200':
          description: Successfully fetched transaction status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusResponse'
        '500':
          description: Failed to fetch transaction status

  /challenge/challenges:
    post:
      summary: Create a new challenge
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChallengeName:
                  type: string
                ChallengeDescription:
                  type: string
                ChallengeCreator:
                  type: integer
                StartDate:
                  type: string
                  format: date-time
                EndDate:
                  type: string
                  format: date-time
                GameID:
                  type: integer
                Wager:
                  type: integer
                MaxParticipants:
                  type: integer
                Target:
                  type: integer
      responses:
        '200':
          description: Challenge created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: created challenge
                  data:
                    type: object
                    properties:
                      IsActive:
                        type: boolean
                      IsSettled:
                        type: boolean
                      IsStarted:
                        type: boolean
                      ChallengeID:
                        type: integer
                      ChallengeName:
                        type: string
                      ChallengeDescription:
                        type: string
                      ChallengeCreator:
                        type: integer
                      StartDate:
                        type: string
                        format: date-time
                      EndDate:
                        type: string
                        format: date-time
                      GameID:
                        type: integer
                      Wager:
                        type: integer
                      MaxParticipants:
                        type: integer
                      Target:
                        type: integer
                      ChallengePublicKey:
                        type: string
                      Winner:
                        type: integer
                      Media:
                        type: string
        '400':
          description: Bad request, missing or invalid parameters

  /challenge/challenges/{ID}:
    get:
      summary: Get a challenge by ID
      security:
        - bearerAuth: []
      parameters:
        - name: ID
          in: path
          description: ID of the challenge to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single challenge object
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successful query
                  data:
                    type: object
                    properties:
                      ChallengeID:
                        type: integer
                      ChallengeName:
                        type: string
                      ChallengeDescription:
                        type: string
                      ChallengeCreator:
                        type: integer
                      ChallengePublicKey:
                        type: string
                      StartDate:
                        type: string
                        format: date-time
                      EndDate:
                        type: string
                        format: date-time
                      GameID:
                        type: integer
                      IsActive:
                        type: boolean
                      IsSettled:
                        type: boolean
                      IsStarted:
                        type: boolean
                      Winner:
                        type: integer
                      MaxParticipants:
                        type: integer
                      Media:
                        type: string
                      Wager:
                        type: integer
                      Target:
                        type: integer
                      GameType:
                        type: string
        '404':
          description: Challenge not found

  /challenge/challenges/onGoing/category/{type}:
    get:
      summary: Get ongoing challenges by category
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          description: Category type ('all' for all categories)
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of ongoing challenges
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ChallengeID:
                          type: integer
                        ChallengeName:
                          type: string
                        ChallengeDescription:
                          type: string
                        ChallengeCreator:
                          type: integer
                        ChallengePublicKey:
                          type: string
                        StartDate:
                          type: string
                          format: date-time
                        EndDate:
                          type: string
                          format: date-time
                        GameID:
                          type: integer
                        IsActive:
                          type: boolean
                        IsSettled:
                          type: boolean
                        IsStarted:
                          type: boolean
                        Winner:
                          type: integer
                        MaxParticipants:
                          type: integer
                        Media:
                          type: string
                        Wager:
                          type: integer
                        Target:
                          type: integer
        '404':
          description: No ongoing challenges found
          
  /challenge/challenges/search/{query}:
    get:
      summary: Search for challenges by name or description
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: path
          description: Search query string
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of challenges matching the search query
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Challenge'
  
  /player:
    post:
      summary: Join a challenge
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChallengeID:
                  type: integer
                  description: The ID of the challenge to join
                  example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the request was successful
                    example: true
                  message:
                    type: string
                    description: A message describing the result
                    example: "Player joined the challenge"
                  data:
                    type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid request"
                  data:
                    type: string
                    example: "Invalid ChallengeID"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Error creating player"
                  data:
                    type: string
                    example: "Unable to join the challenge"
        
components:
  schemas:
    Challenge:
      type: object
      properties:
        ChallengeID:
          type: integer
        ChallengeName:
          type: string
        ChallengeDescription:
          type: string
        ChallengeCreator:
          type: integer
        ChallengePublicKey:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        GameID:
          type: integer
        IsActive:
          type: boolean
        IsSettled:
          type: boolean
        IsStarted:
          type: boolean
        Winner:
          type: integer
        MaxParticipants:
          type: integer
        Media:
          type: string
        Wager:
          type: integer
        Target:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


















